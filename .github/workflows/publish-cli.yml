name: Release qmt Executable

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  APP_NAME: qmt

jobs:
  # ==================================================================
  #  Build Job: Compiles the executable for each target in the matrix
  # ==================================================================
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # --- Linux Targets ---
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: qmt
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: qmt
            archive_ext: tar.gz

          # --- macOS Targets ---
          - os: macos-latest # Intel-based runner
            target: x86_64-apple-darwin
            bin_name: qmt
            archive_ext: tar.gz
          - os: macos-14 # Apple Silicon (ARM64) runner
            target: aarch64-apple-darwin
            bin_name: qmt
            archive_ext: tar.gz

          # --- Windows Targets ---
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: qmt.exe
            archive_ext: zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            bin_name: qmt.exe
            archive_ext: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      # For cross-compiling on Linux from x86_64 to aarch64, we need the appropriate C linker.
      - name: Setup cross-compilation for Linux aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # Cache Cargo dependencies to speed up future builds
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build executable
        run: cargo build --release --package ${{ env.APP_NAME }} --target ${{ matrix.target }}

      - name: Prepare artifact for upload
        shell: bash
        run: |
          ARTIFACT_DIR="dist"
          PACKAGE_NAME="${{ env.APP_NAME }}-${{ github.ref_name }}-${{ matrix.target }}"
          STAGING_PATH="${ARTIFACT_DIR}/${PACKAGE_NAME}"
          mkdir -p "${STAGING_PATH}"

          # Copy files into the staging directory
          cp "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" "${STAGING_PATH}/"
          cp README.md "${STAGING_PATH}/"
          cp LICENSE "${STAGING_PATH}/" || true

          # Create the archive from the staging directory
          if [ "${{ matrix.archive_ext }}" = "zip" ]; then
            ARCHIVE_PATH="${ARTIFACT_DIR}/${PACKAGE_NAME}.zip"
            (cd "${STAGING_PATH}" && zip -r "../${PACKAGE_NAME}.zip" .)
          else
            ARCHIVE_PATH="${ARTIFACT_DIR}/${PACKAGE_NAME}.tar.gz"
            tar -czf "${ARCHIVE_PATH}" -C "${ARTIFACT_DIR}" "${PACKAGE_NAME}"
          fi

          echo "ASSET_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

      # Upload the packaged executable as a build artifact.
      # This will be downloaded by the 'release' job later.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.target }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: ${{ env.APP_NAME }}-*
          merge-multiple: true

      - name: List downloaded artifacts
        run: ls -l artifacts/

      - name: Create Release and Upload Assets
        id: create_release # Add an ID to reference this step's outputs
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          generate_release_notes: true
          # Create a draft release if the trigger was not a tag push.
          # Otherwise, create a full, published release.
          draft: ${{ github.ref_type != 'tag' }}
          # Mark non-tag releases as pre-releases for clarity.
          prerelease: ${{ github.ref_type != 'tag' }}

      - name: Print Release URL
        if: github.ref_type != 'tag'
        run: echo "Draft release URL: ${{ steps.create_release.outputs.html_url }}"
