name: Nightly CLI Release

on:
  schedule:
    # Runs at 03:00 UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  APP_NAME: qmt

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ─── Linux (Static MUSL) ──────────────────────────────────────────
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin_name: qmt
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            bin_name: qmt
            archive_ext: tar.gz

          # ─── macOS ─────────────────────────────────────────────────────────
          - os: macos-14
            target: x86_64-apple-darwin
            bin_name: qmt
            archive_ext: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            bin_name: qmt
            archive_ext: tar.gz

          # ─── Windows (Static CRT) ────────────────────────────────────────
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: qmt.exe
            archive_ext: zip
            rust_flags: "-C target-feature=+crt-static"
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            bin_name: qmt.exe
            archive_ext: zip
            rust_flags: "-C target-feature=+crt-static"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # We generate a consistent version string based on the commit hash.
      - name: Generate version string
        id: version
        shell: bash
        run: echo "name=nightly-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain & targets
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation toolchain
        if: runner.os == 'Linux'
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with Cargo
        env:
          RUSTFLAGS: ${{ matrix.rust_flags || '' }}
        run: cargo build --release --bin ${{ env.APP_NAME }} --target ${{ matrix.target }}

      - name: Prepare artifact for upload (Linux & macOS)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          ARTIFACT_DIR="dist"
          # Use the generated version string for the package name.
          PKG="${{ env.APP_NAME }}-${{ steps.version.outputs.name }}-${{ matrix.target }}"
          STAGING="$ARTIFACT_DIR/$PKG"
          mkdir -p "$STAGING"
          cp "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" "$STAGING/"
          cp README.md LICENSE "$STAGING/"
          tar -czf "$ARTIFACT_DIR/${PKG}.tar.gz" -C "$ARTIFACT_DIR" "$PKG"
          echo "ASSET_PATH=$ARTIFACT_DIR/${PKG}.tar.gz" >> $GITHUB_ENV

      - name: Prepare artifact for upload (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $ARTIFACT_DIR = "dist"
          # Use the generated version string for the package name.
          $PKG = "${{ env.APP_NAME }}-${{ steps.version.outputs.name }}-${{ matrix.target }}"
          $STAGING = Join-Path $ARTIFACT_DIR $PKG
          New-Item -ItemType Directory -Force -Path $STAGING
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" -Destination $STAGING
          Copy-Item README.md, LICENSE -Destination $STAGING
          $ZIP_PATH = "$ARTIFACT_DIR/${PKG}.zip"
          Compress-Archive -Path (Join-Path $STAGING '*') -DestinationPath $ZIP_PATH -Force
          echo "ASSET_PATH=${ZIP_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.target }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create Nightly GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create/update releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
          pattern: ${{ env.APP_NAME }}-*
          merge-multiple: true

      # This step creates or updates a single "Nightly" pre-release.
      # It will overwrite existing assets with new builds.
      - name: Create or Update Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Nightly Build
          body: |
            **This is a pre-release build from the `main` branch.**

            It is not intended for production use.

            Commit: `${{ github.sha }}`
          prerelease: true
          draft: false
          files: artifacts/*

